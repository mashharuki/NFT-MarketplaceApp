{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","kryptoBird","console","log","state","contract","methods","send","from","account","once","receipt","setState","kryptoBirdz","concat","toConsumableArray","KryptoBird","totalSupply","loadWeb3","loadBlockchainData","detectEthereumProvider","provider","window","web3","Web3","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","Contract","i","KryptoBirdz","alert","_this2","react_default","a","createElement","className","style","color","role","opacity","onSubmit","event","preventDefault","value","type","name","placeholder","ref","input","margin","map","key","mdb_react_ui_kit_esm","maxWidth","src","position","height","marginRight","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9be2af32.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from \"./../abis/Kryptobirdz.json\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from \"mdb-react-ui-kit\"\nimport './App.css'\n\n/**\n * Appコンポーネント\n */\nclass App extends Component {\n\n      // レンダリング後に実行する関数\n      async componentDidMount() {\n            await this.loadWeb3();\n            await this.loadBlockchainData();\n      }\n\n      // コンストラクター\n      constructor(props) {\n            super(props);\n            // ステート変数\n            this.state = {\n                  account: '',\n                  contract: null,\n                  totalSupply: 0,\n                  kryptoBirdz: [],\n            }\n      }\n\n      // メタマスクに接続する。\n      async loadWeb3() {\n            const provider = await detectEthereumProvider();\n\n            if(provider) {\n                  console.log(\"ethereum wallet is connected\");\n                  window.web3 = new Web3(provider);\n            } else {\n                  console.log(\"no ethereum wallet detected\");\n            }\n      }\n\n      // アカウント情報を読み取る関数\n      async loadBlockchainData() {\n            const web3 =  window.web3;\n            // アカウント情報\n            const accounts = await web3.eth.getAccounts();\n            this.setState({account: accounts[0]});\n            console.log(\"accounts\", this.state.account);\n\n            const networkId = await web3.eth.net.getId();\n            const networkData = KryptoBird.networks[networkId];\n            // コントラクトのnetworkデータが存在すれば\n            if(networkData) {\n                  const abi = KryptoBird.abi;\n                  const address = networkData.address\n                  const contract = new web3.eth.Contract(abi, address);\n                  this.setState({contract: contract});\n                  // 総供給量を取得する。\n                  const totalSupply = await contract.methods.totalSupply().call();\n                  this.setState({totalSupply: totalSupply});\n                  console.log(\"totalsupply:\", this.state.totalSupply);\n\n                  for(let i = 1; i <= totalSupply; i++) {\n                        const KryptoBird = await contract.methods.KryptoBirdz(i - 1).call();\n                        this.setState({\n                              kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n                        });\n                  }\n                  console.log('kryptoBirdz:', this.state.kryptoBirdz);\n            } else {\n                  window.alert('Smart contract not deployed')\n            }\n      }\n\n      // mint関数\n      mint = (kryptoBird) => {\n            console.log(\"kryptoBird:\", kryptoBird);\n            this.state.contract.methods\n                  .mint(kryptoBird)\n                  .send({from: this.state.account})\n                  .once('receipt', (receipt) => {\n                        this.setState({\n                              kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n                        });\n                  });\n\n      };\n      \n      render() {\n            return(\n                  <div className=\"container-filled\">\n                        {console.log(this.state.kryptoBirdz)}\n                        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shodow\">\n                              <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color: 'white'}}>\n                                    Krypto Birdz NFTs (Non Fungible Tokens)\n                              </div>\n                              <ul className=\"navbar-nav px-3\">\n                                    <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n                                          <small className=\"text-white\">\n                                                {this.state.account}\n                                          </small>\n                                    </li>\n                              </ul>\n                        </nav>\n                        <div className=\"container-fluid mt-1\">\n                              <div className=\"row\">\n                                    <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n                                          <div className=\"content mr-auto ml-auto\" style={{opacity: '0.8'}}>\n                                                <h1 style={{color: 'black'}}>\n                                                      Kryptobirdz - NFT Marketplace\n                                                </h1>\n                                                <form onSubmit={(event) => {\n                                                      event.preventDefault();\n                                                      const kryptoBird = this.kryptoBird.value;\n                                                      this.mint(kryptoBird);\n                                                }}>\n                                                      <input \n                                                            type=\"text\" \n                                                            name=\"text\" \n                                                            className=\"form-control mb-1\" \n                                                            placeholder=\"add file location\"\n                                                            ref={(input) => this.kryptoBird = input}\n                                                            />\n                                                      <input type=\"submit\" style={{margin: '6px'}} className=\"btn btn-primary btn-black\" value=\"mint\"/>\n                                                </form>\n                                          </div>\n                                    </main>\n                              </div>\n                              <hr></hr>\n                              <div className=\"row textCenter\">\n                                    {this.state.kryptoBirdz.map((kryptoBird, key) => {\n                                          return(\n                                                <div>\n                                                      <div>\n                                                            <MDBCard className=\"token img\" style={{maxWidth: '22rem'}}>\n                                                                  <MDBCardImage src={kryptoBird} position=\"top\" height='250rem' style={{marginRight: '4px'}} />\n                                                                  <MDBCardBody>\n                                                                        <MDBCardTitle>\n                                                                              KryptoBirdz\n                                                                        </MDBCardTitle>\n                                                                        <MDBCardText>\n                                                                              The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain.\n                                                                        </MDBCardText>\n                                                                        <MDBBtn href={kryptoBird}>\n                                                                              Download\n                                                                        </MDBBtn>\n                                                                  </MDBCardBody>\n                                                            </MDBCard>\n                                                      </div>\n                                                </div>\n                                          )\n                                    })}\n                              </div>\n                        </div>\n                  </div>\n            )\n      }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}